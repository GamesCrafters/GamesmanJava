package edu.berkeley.gamesman.thrift;
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class GetNextMoveResponse implements TBase, java.io.Serializable, Cloneable, Comparable<GetNextMoveResponse> {
  private static final TStruct STRUCT_DESC = new TStruct("GetNextMoveResponse");
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.STRING, (short)1);
  private static final TField RESPONSE_FIELD_DESC = new TField("response", TType.LIST, (short)2);
  private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRING, (short)3);

  public String status;
  public List<GamestateResponse> response;
  public String message;
  public static final int STATUS = 1;
  public static final int RESPONSE = 2;
  public static final int MESSAGE = 3;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(STATUS, new FieldMetaData("status", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(RESPONSE, new FieldMetaData("response", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, GamestateResponse.class))));
    put(MESSAGE, new FieldMetaData("message", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(GetNextMoveResponse.class, metaDataMap);
  }

  public GetNextMoveResponse() {
  }

  public GetNextMoveResponse(
    String status)
  {
    this();
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetNextMoveResponse(GetNextMoveResponse other) {
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetResponse()) {
      List<GamestateResponse> __this__response = new ArrayList<GamestateResponse>();
      for (GamestateResponse other_element : other.response) {
        __this__response.add(new GamestateResponse(other_element));
      }
      this.response = __this__response;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
  }

  public GetNextMoveResponse deepCopy() {
    return new GetNextMoveResponse(this);
  }

  @Deprecated
  public GetNextMoveResponse clone() {
    return new GetNextMoveResponse(this);
  }

  public String getStatus() {
    return this.status;
  }

  public GetNextMoveResponse setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  // Returns true if field status is set (has been asigned a value) and false otherwise
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getResponseSize() {
    return (this.response == null) ? 0 : this.response.size();
  }

  public java.util.Iterator<GamestateResponse> getResponseIterator() {
    return (this.response == null) ? null : this.response.iterator();
  }

  public void addToResponse(GamestateResponse elem) {
    if (this.response == null) {
      this.response = new ArrayList<GamestateResponse>();
    }
    this.response.add(elem);
  }

  public List<GamestateResponse> getResponse() {
    return this.response;
  }

  public GetNextMoveResponse setResponse(List<GamestateResponse> response) {
    this.response = response;
    return this;
  }

  public void unsetResponse() {
    this.response = null;
  }

  // Returns true if field response is set (has been asigned a value) and false otherwise
  public boolean isSetResponse() {
    return this.response != null;
  }

  public void setResponseIsSet(boolean value) {
    if (!value) {
      this.response = null;
    }
  }

  public String getMessage() {
    return this.message;
  }

  public GetNextMoveResponse setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  // Returns true if field message is set (has been asigned a value) and false otherwise
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case RESPONSE:
      if (value == null) {
        unsetResponse();
      } else {
        setResponse((List<GamestateResponse>)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case STATUS:
      return getStatus();

    case RESPONSE:
      return getResponse();

    case MESSAGE:
      return getMessage();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case STATUS:
      return isSetStatus();
    case RESPONSE:
      return isSetResponse();
    case MESSAGE:
      return isSetMessage();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetNextMoveResponse)
      return this.equals((GetNextMoveResponse)that);
    return false;
  }

  public boolean equals(GetNextMoveResponse that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_response = true && this.isSetResponse();
    boolean that_present_response = true && that.isSetResponse();
    if (this_present_response || that_present_response) {
      if (!(this_present_response && that_present_response))
        return false;
      if (!this.response.equals(that.response))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GetNextMoveResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GetNextMoveResponse typedOther = (GetNextMoveResponse)other;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(status, typedOther.status);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetResponse()).compareTo(isSetResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(response, typedOther.response);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(message, typedOther.message);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case STATUS:
          if (field.type == TType.STRING) {
            this.status = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RESPONSE:
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.response = new ArrayList<GamestateResponse>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                GamestateResponse _elem2;
                _elem2 = new GamestateResponse();
                _elem2.read(iprot);
                this.response.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MESSAGE:
          if (field.type == TType.STRING) {
            this.message = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.status != null) {
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeString(this.status);
      oprot.writeFieldEnd();
    }
    if (this.response != null) {
      if (isSetResponse()) {
        oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.response.size()));
          for (GamestateResponse _iter3 : this.response)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.message != null) {
      if (isSetMessage()) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(this.message);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetNextMoveResponse(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetResponse()) {
      if (!first) sb.append(", ");
      sb.append("response:");
      if (this.response == null) {
        sb.append("null");
      } else {
        sb.append(this.response);
      }
      first = false;
    }
    if (isSetMessage()) {
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

